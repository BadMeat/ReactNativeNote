createdAt: "2020-02-27T07:14:20.540Z"
updatedAt: "2020-02-27T07:15:53.544Z"
type: "SNIPPET_NOTE"
folder: "eccad2851384cb246c65"
title: "Login"
tags: []
description: "Login"
snippets: [
  {
    linesHighlighted: []
    name: "index-action.js"
    mode: "JavaScript"
    content: '''
      import { EMAIL_CHANGED, PASS_CHANGED, LOGIN_FAILED, LOGIN_SUCCED, IS_LOADING } from "./types"
      import auth from '@react-native-firebase/auth';
      
      export const emailChanged = (text) => {
          return {
              type: EMAIL_CHANGED,
              payload: text
          }
      }
      
      export const passwordChanged = (text) => {
          return {
              type: PASS_CHANGED,
              payload: text
          }
      }
      
      export const signinEmail = ({ email, password }) => {
          return (dispatch) => {
              dispatch({ type: IS_LOADING })
              auth().signInWithEmailAndPassword(email, password)
                  .then(user => {
                      dispatch({ type: LOGIN_SUCCED, payload: user })
                  })
                  .catch(() => {
                      dispatch({ type: LOGIN_FAILED })
                  })
          }
      }
    '''
  }
  {
    name: "types-action.js"
    mode: "JavaScript"
    content: '''
      export const EMAIL_CHANGED = "email_changed"
      export const PASS_CHANGED = "pass_changed"
      export const LOGIN_SUCCED = "login_succed"
      export const LOGIN_FAILED = "login_failed"
      export const IS_LOADING = "is_loading"
    '''
    linesHighlighted: []
  }
  {
    name: "Home-component.js"
    mode: "JavaScript"
    content: '''
      import React, { Component } from 'react'
      import { Provider } from 'react-redux'
      import FormLogin from './FormLogin'
      import { createStore, applyMiddleware } from 'redux'
      import reducers from '../reducers'
      import ReduxThunk from 'redux-thunk'
      
      export default class Home extends Component {
          render() {
              return (
                  <Provider store={createStore(reducers, {}, applyMiddleware(ReduxThunk))}>
                      <FormLogin />
                  </Provider>
              )
          }
      }
      
    '''
    linesHighlighted: []
  }
  {
    name: "FormLogin-component.js"
    mode: "JavaScript"
    content: '''
      import React, { Component } from 'react'
      import { Text, View, Button, ActivityIndicator } from 'react-native'
      import { TextInput } from 'react-native-gesture-handler'
      import { connect } from 'react-redux'
      import { emailChanged, passwordChanged, signinEmail } from '../action'
      
      class FormLogin extends Component {
      
          onEmailChange(text) {
              this.props.emailChanged(text)
          }
      
          onPasswordChange(text) {
              this.props.passwordChanged(text)
          }
      
          onSign() {
              console.log('panggil saya bang')
              const { email, password } = this.props
              this.props.signinEmail({ email, password })
          }
      
          renderButton() {
              if (this.props.isLoading) {
                  return <ActivityIndicator size="large" />
              }
              return (<Button
                  onPress={this.onSign.bind(this)}
                  title="Login"
              />)
          }
      
          renderError() {
              if (this.props.error) {
                  return (
                      <View>
                          <Text> {this.props.error}</Text>
                      </View>
                  )
              }
          }
      
          render() {
              return (
                  <View>
                      <TextInput
                          placeholder="Email"
                          onChangeText={this.onEmailChange.bind(this)}
                          value={this.props.email}
                      />
                      <TextInput
                          placeholder="Password"
                          onChangeText={this.onPasswordChange.bind(this)}
                          value={this.props.password}
                      />
                      {
                          this.renderError()
                      }{
                          this.renderButton()
                      }
                  </View>
              )
          }
      }
      
      const mapStateToProps = (state) => {
          console.log(state)
          return {
              email: state.auth.email,
              password: state.auth.password,
              error: state.auth.error,
              isLoading: state.auth.isLoading
          }
      }
      
      export default connect(mapStateToProps, { emailChanged, passwordChanged, signinEmail })(FormLogin)
      
    '''
    linesHighlighted: []
  }
  {
    name: "AuthReducers-reducers.js"
    mode: "JavaScript"
    content: '''
      import { EMAIL_CHANGED, PASS_CHANGED, LOGIN_SUCCED, LOGIN_FAILED, IS_LOADING } from "../action/types"
      
      const INTIAL_STATE = {
          email: '',
          password: '',
          user: null,
          error: '',
          isLoading: false
      }
      
      export default (state = INTIAL_STATE, action) => {
          console.log(action)
          switch (action.type) {
              case EMAIL_CHANGED:
                  return { ...state, email: action.payload }
              case PASS_CHANGED:
                  return { ...state, password: action.payload }
              case IS_LOADING:
                  return { ...state, isLoading: true }
              case LOGIN_SUCCED:
                  return { ...state, user: action.payload, isLoading: false }
              case LOGIN_FAILED:
                  return { ...state, error: 'Auth Failed', password: '', email: '', isLoading: false }
              default:
                  return state
          }
      }
    '''
    linesHighlighted: []
  }
  {
    name: "index-reducers.js"
    mode: "JavaScript"
    content: '''
      import { combineReducers } from "redux";
      import AuthReducers from "./AuthReducers";
      
      export default combineReducers({
          auth: AuthReducers
      })
    '''
    linesHighlighted: []
  }
]
isStarred: false
isTrashed: false
